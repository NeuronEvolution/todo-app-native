/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Account Private API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost/api-private/v1/accounts".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} name 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(name: string, password: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling login.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling login.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(jwt: string, options: any = {}): FetchArgs {
            // verify required parameter 'jwt' is not null or undefined
            if (jwt === null || jwt === undefined) {
                throw new RequiredError('jwt','Required parameter jwt was null or undefined when calling logout.');
            }
            const localVarPath = `/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(phone: string, smsCode: string, newPassword: string, options: any = {}): FetchArgs {
            // verify required parameter 'phone' is not null or undefined
            if (phone === null || phone === undefined) {
                throw new RequiredError('phone','Required parameter phone was null or undefined when calling resetPassword.');
            }
            // verify required parameter 'smsCode' is not null or undefined
            if (smsCode === null || smsCode === undefined) {
                throw new RequiredError('smsCode','Required parameter smsCode was null or undefined when calling resetPassword.');
            }
            // verify required parameter 'newPassword' is not null or undefined
            if (newPassword === null || newPassword === undefined) {
                throw new RequiredError('newPassword','Required parameter newPassword was null or undefined when calling resetPassword.');
            }
            const localVarPath = `/resetPassword`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (smsCode !== undefined) {
                localVarQueryParameter['smsCode'] = smsCode;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} scene 
         * @param {string} phone 
         * @param {string} [captchaId] 
         * @param {string} [captchaCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsCode(scene: string, phone: string, captchaId?: string, captchaCode?: string, options: any = {}): FetchArgs {
            // verify required parameter 'scene' is not null or undefined
            if (scene === null || scene === undefined) {
                throw new RequiredError('scene','Required parameter scene was null or undefined when calling smsCode.');
            }
            // verify required parameter 'phone' is not null or undefined
            if (phone === null || phone === undefined) {
                throw new RequiredError('phone','Required parameter phone was null or undefined when calling smsCode.');
            }
            const localVarPath = `/smsCode`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scene !== undefined) {
                localVarQueryParameter['scene'] = scene;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (captchaId !== undefined) {
                localVarQueryParameter['captchaId'] = captchaId;
            }

            if (captchaCode !== undefined) {
                localVarQueryParameter['captchaCode'] = captchaCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms login
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsLogin(phone: string, smsCode: string, options: any = {}): FetchArgs {
            // verify required parameter 'phone' is not null or undefined
            if (phone === null || phone === undefined) {
                throw new RequiredError('phone','Required parameter phone was null or undefined when calling smsLogin.');
            }
            // verify required parameter 'smsCode' is not null or undefined
            if (smsCode === null || smsCode === undefined) {
                throw new RequiredError('smsCode','Required parameter smsCode was null or undefined when calling smsLogin.');
            }
            const localVarPath = `/smsLogin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (smsCode !== undefined) {
                localVarQueryParameter['smsCode'] = smsCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sms signup
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsSignup(phone: string, smsCode: string, password: string, options: any = {}): FetchArgs {
            // verify required parameter 'phone' is not null or undefined
            if (phone === null || phone === undefined) {
                throw new RequiredError('phone','Required parameter phone was null or undefined when calling smsSignup.');
            }
            // verify required parameter 'smsCode' is not null or undefined
            if (smsCode === null || smsCode === undefined) {
                throw new RequiredError('smsCode','Required parameter smsCode was null or undefined when calling smsSignup.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling smsSignup.');
            }
            const localVarPath = `/smsSignup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (smsCode !== undefined) {
                localVarQueryParameter['smsCode'] = smsCode;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} name 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(name: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).login(name, password, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(jwt: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).logout(jwt, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(phone: string, smsCode: string, newPassword: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).resetPassword(phone, smsCode, newPassword, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary 
         * @param {string} scene 
         * @param {string} phone 
         * @param {string} [captchaId] 
         * @param {string} [captchaCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsCode(scene: string, phone: string, captchaId?: string, captchaCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).smsCode(scene, phone, captchaId, captchaCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return new Promise<Response>((resolve) => {return resolve(response);})
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary sms login
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsLogin(phone: string, smsCode: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).smsLogin(phone, smsCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
        /**
         * 
         * @summary sms signup
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsSignup(phone: string, smsCode: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).smsSignup(phone, smsCode, password, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        return response.json().then((data: {}) => {throw data; });
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary 
         * @param {string} name 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(name: string, password: string, options?: any) {
            return DefaultApiFp(configuration).login(name, password, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} jwt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(jwt: string, options?: any) {
            return DefaultApiFp(configuration).logout(jwt, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(phone: string, smsCode: string, newPassword: string, options?: any) {
            return DefaultApiFp(configuration).resetPassword(phone, smsCode, newPassword, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} scene 
         * @param {string} phone 
         * @param {string} [captchaId] 
         * @param {string} [captchaCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsCode(scene: string, phone: string, captchaId?: string, captchaCode?: string, options?: any) {
            return DefaultApiFp(configuration).smsCode(scene, phone, captchaId, captchaCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary sms login
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsLogin(phone: string, smsCode: string, options?: any) {
            return DefaultApiFp(configuration).smsLogin(phone, smsCode, options)(fetch, basePath);
        },
        /**
         * 
         * @summary sms signup
         * @param {string} phone 
         * @param {string} smsCode 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsSignup(phone: string, smsCode: string, password: string, options?: any) {
            return DefaultApiFp(configuration).smsSignup(phone, smsCode, password, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {} name 
     * @param {} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(name: string, password: string, options?: any) {
        return DefaultApiFp(this.configuration).login(name, password, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} jwt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(jwt: string, options?: any) {
        return DefaultApiFp(this.configuration).logout(jwt, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} phone 
     * @param {} smsCode 
     * @param {} newPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetPassword(phone: string, smsCode: string, newPassword: string, options?: any) {
        return DefaultApiFp(this.configuration).resetPassword(phone, smsCode, newPassword, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 
     * @param {} scene 
     * @param {} phone 
     * @param {} [captchaId] 
     * @param {} [captchaCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public smsCode(scene: string, phone: string, captchaId?: string, captchaCode?: string, options?: any) {
        return DefaultApiFp(this.configuration).smsCode(scene, phone, captchaId, captchaCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary sms login
     * @param {} phone 
     * @param {} smsCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public smsLogin(phone: string, smsCode: string, options?: any) {
        return DefaultApiFp(this.configuration).smsLogin(phone, smsCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary sms signup
     * @param {} phone 
     * @param {} smsCode 
     * @param {} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public smsSignup(phone: string, smsCode: string, password: string, options?: any) {
        return DefaultApiFp(this.configuration).smsSignup(phone, smsCode, password, options)(this.fetch, this.basePath);
    }

}

export interface loginParams {
    name: string;
    password: string;
}
export interface logoutParams {
    jwt: string;
}
export interface resetPasswordParams {
    phone: string;
    smsCode: string;
    newPassword: string;
}
export interface smsCodeParams {
    scene: string;
    phone: string;
    captchaId?: string;
    captchaCode?: string;
}
export interface smsLoginParams {
    phone: string;
    smsCode: string;
}
export interface smsSignupParams {
    phone: string;
    smsCode: string;
    password: string;
}


